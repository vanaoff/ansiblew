#!/usr/bin/env python3

import logging
import os
import shutil
import sys
import tarfile
from argparse import ArgumentParser
from os import path as osp
from subprocess import run

LOG_LEVEL = 'INFO'
AP_VERSION = 'v0.4.1'

logging.basicConfig(format='%(asctime)s [%(levelname)s]: %(message)s', stream=sys.stdout, level=LOG_LEVEL)
logger = logging.getLogger()

python_version = sys.version_info[0]
if python_version != 3:
    logger.error("Python %s is not supported.", python_version)

URL_TEMPLATE = 'https://github.com/ownport/portable-ansible/releases/download/%(version)s/portable-ansible-%(version)s-py3.tar.bz2'


SCRIPT_DIR = osp.dirname(osp.realpath(sys.argv[0]))
BASE_DIR = osp.join(SCRIPT_DIR, '.blew')

ANSIBLE = osp.join(BASE_DIR, 'ansible')
EXEC = osp.join(BASE_DIR, 'exec')
BIN = osp.join(BASE_DIR, 'bin')

SCRIPT_TEMPLATE = """\
#!/usr/bin/env bash
python3 $(dirname $0)/../exec/%(command)s $@
"""

COMMANDS = (
    'ansible',
    'ansible-config',
    'ansible-connection',
    'ansible-console',
    'ansible-doc',
    'ansible-galaxy',
    'ansible-inventory',
    'ansible-lint',
    'ansible-playbook',
    'ansible-pull',
    'ansible-test',
    'ansible-vault'
)


def update_rec(default, custom, path=()):
    merged = default.copy()
    for key, value in default.items():
        if key in custom:
            custom_value = custom[key]
            assert type(custom_value) == type(value)
            if isinstance(value, dict):
                merged[key] = update_rec(value, custom_value, path + key)
            else:
                merged[key] = custom_value
    return merged


def custom_config_load(file):
    with open(file) as o:
        import yaml
        return yaml.safe_load(o)


def prepare_dir(path, reset=False):
    if reset and osp.exists(path):
        shutil.rmtree(path)
    logger.debug("Preparing dir %s.", path)
    from pathlib import Path
    Path(path).mkdir(parents=True, exist_ok=True)
    return path


def safe_remove_dir(dir):
    if osp.exists(dir):
        logger.debug('Removing %s.', dir)
        shutil.rmtree(dir)
    else:
        logger.debug('%s does not exist.', dir)


def prepare(base_dir, version, clean):
    if clean:
        safe_remove_dir(base_dir)
    if not osp.exists(base_dir):
        from urllib.request import urlretrieve
        url = URL_TEMPLATE % {'version': version}
        logger.info('Downloading Portable Ansible version %s from %s.', version, url)
        with tarfile.open(urlretrieve(url, filename=None)[0]) as tar:
            logger.info('Extracting Portable Ansible to %s.', base_dir)
            tar.extractall(base_dir)
            os.rename(osp.join(base_dir, 'ansible'), ANSIBLE)
        prepare_dir(EXEC)
        prepare_dir(BIN)
        for command in COMMANDS:
            os.symlink('../ansible', osp.join(EXEC, command), True)
            script = osp.join(BIN, command)
            with open(script, 'w') as w:
                w.write(SCRIPT_TEMPLATE % {'command': command, 'ansible_exec': EXEC})
            os.chmod(script, 0o755)


parser = ArgumentParser(osp.basename(sys.argv[0]), add_help=False)
parser.add_argument('--log-level', default='INFO')
parser.add_argument('--blew-help', action='store_true')
parser.set_defaults(command='ansible')

subparsers = parser.add_subparsers()
parser_reset = subparsers.add_parser('reset')
parser_reset.set_defaults(command='reset')
for command in COMMANDS:
    if command.startswith('ansible-'):
        subparser = subparsers.add_parser(command[8:], add_help=False)
        subparser.set_defaults(command=command)

if __name__ == '__main__':
    args, extra_args = parser.parse_known_args()
    if args.blew_help:
        parser.print_help()
        sys.exit(0)
    if not osp.exists(BASE_DIR) or args.command == 'reset':
        prepare(BASE_DIR, version=AP_VERSION, clean=True)
    if args.command in COMMANDS:
        process = run([osp.join(BIN, args.command)] + extra_args)
        sys.exit(process.returncode)
